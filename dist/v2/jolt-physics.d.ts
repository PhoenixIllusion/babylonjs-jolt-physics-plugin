import { BoundingBox } from "@babylonjs/core/Culling/boundingBox";
import { Vector3, Quaternion } from "@babylonjs/core/Maths/math";
import { Mesh } from "@babylonjs/core/Meshes/mesh";
import "@babylonjs/core/Meshes/instancedMesh";
import "@babylonjs/core/Meshes/thinInstanceMesh";
import { TransformNode } from "@babylonjs/core/Meshes/transformNode";
import { Observable } from "@babylonjs/core/Misc/observable";
import { PhysicsRaycastResult, IRaycastQuery } from "@babylonjs/core/Physics/physicsRaycastResult";
import { ConstrainedBodyPair, IBasePhysicsCollisionEvent, IPhysicsCollisionEvent, IPhysicsEnginePluginV2, PhysicsConstraintAxis, PhysicsConstraintAxisLimitMode, PhysicsConstraintMotorType, PhysicsMassProperties, PhysicsMotionType, PhysicsShapeParameters, PhysicsShapeType } from "@babylonjs/core/Physics/v2/IPhysicsEnginePlugin";
import { PhysicsMaterial } from "@babylonjs/core/Physics/v2/physicsMaterial";
import { Nullable } from "@babylonjs/core/types";
import Jolt from "../jolt-import";
import { JoltPhysicsShape } from "./jolt-shape";
import { IJoltBodyData, JoltPhysicsBody } from "./jolt-body";
import { JoltPhysicsConstraint } from "./jolt-constraint";
import { JoltContactSetting, OnContactValidateResponse } from "../jolt-contact";
import { MotorcycleController, Vehicle, WheeledVehicleController, WheeledVehicleInput } from "../jolt-physics-vehicle-controller";
export declare class JoltJSPlugin implements IPhysicsEnginePluginV2 {
    private jolt;
    private _useDeltaForWorldStep;
    world: Jolt.PhysicsSystem;
    onCollisionObservable: Observable<IPhysicsCollisionEvent>;
    onCollisionEndedObservable: Observable<IBasePhysicsCollisionEvent>;
    onTriggerCollisionObservable: Observable<IBasePhysicsCollisionEvent>;
    name: string;
    private _timeStep;
    private _fixedTimeStep;
    private _maxSteps;
    private _tempVec3A;
    private _tempVec3B;
    private _tempQuaternion;
    private _bodyInterface;
    private _raycaster;
    private _contactCollector;
    private _contactListener;
    private _physicsBodyHash;
    private _bodyHash;
    private toDispose;
    private _collisionCallbacks;
    static loadPlugin(_useDeltaForWorldStep?: boolean, physicsSettings?: any, importSettings?: any): Promise<JoltJSPlugin>;
    constructor(jolt: Jolt.JoltInterface, _useDeltaForWorldStep?: boolean);
    private GetPhysicsBodyForBodyId;
    private GetBodyForBodyId;
    setGravity(gravity: Vector3): void;
    setTimeStep(timeStep: number): void;
    setFixedTimeStep(fixedTimeStep: number): void;
    setMaxSteps(maxSteps: number): void;
    getTimeStep(): number;
    private _perPhysicsStepCallbacks;
    registerPerPhysicsStepCallback(listener: (timeStep: number) => void): void;
    unregisterPerPhysicsStepCallback(listener: (timeStep: number) => void): void;
    executeStep(delta: number, physicsBodies: JoltPhysicsBody[]): void;
    private _stepSimulation;
    private setPhysicsBodyTransformation;
    getPluginVersion(): number;
    _createPluginData(motionType: PhysicsMotionType, position: Vector3, orientation: Quaternion, massProperties: PhysicsMassProperties): IJoltBodyData;
    initBody(body: JoltPhysicsBody, motionType: PhysicsMotionType, position: Vector3, orientation: Quaternion): void;
    initBodyInstances(body: JoltPhysicsBody, motionType: PhysicsMotionType, mesh: Mesh): void;
    private _createOrUpdateBodyInstances;
    updateBodyInstances(body: JoltPhysicsBody, mesh: Mesh): void;
    removeBody(body: JoltPhysicsBody): void;
    sync(body: JoltPhysicsBody): void;
    syncTransform(body: JoltPhysicsBody, transformNode: TransformNode): void;
    setShape(body: JoltPhysicsBody, shape: Nullable<JoltPhysicsShape>): void;
    getShape(body: JoltPhysicsBody): Nullable<JoltPhysicsShape>;
    private _getJoltShape;
    getShapeType(shape: JoltPhysicsShape): PhysicsShapeType;
    setEventMask(_body: JoltPhysicsBody, _eventMask: number, _instanceIndex?: number | undefined): void;
    getEventMask(_body: JoltPhysicsBody, _instanceIndex?: number | undefined): number;
    setMotionType(body: JoltPhysicsBody, motionType: PhysicsMotionType, instanceIndex?: number | undefined): void;
    getMotionType(body: JoltPhysicsBody, instanceIndex?: number | undefined): PhysicsMotionType;
    computeMassProperties(body: JoltPhysicsBody, instanceIndex?: number | undefined): PhysicsMassProperties;
    setMassProperties(body: JoltPhysicsBody, massProps: PhysicsMassProperties, instanceIndex?: number | undefined): void;
    getMassProperties(body: JoltPhysicsBody, instanceIndex?: number | undefined): PhysicsMassProperties;
    setLinearDamping(body: JoltPhysicsBody, damping: number, instanceIndex?: number | undefined): void;
    getLinearDamping(body: JoltPhysicsBody, instanceIndex?: number | undefined): number;
    setAngularDamping(body: JoltPhysicsBody, damping: number, instanceIndex?: number | undefined): void;
    getAngularDamping(body: JoltPhysicsBody, instanceIndex?: number | undefined): number;
    setLinearVelocity(body: JoltPhysicsBody, linVel: Vector3, instanceIndex?: number | undefined): void;
    getLinearVelocityToRef(body: JoltPhysicsBody, linVel: Vector3, instanceIndex?: number | undefined): void;
    applyImpulse(body: JoltPhysicsBody, impulse: Vector3, location: Vector3, instanceIndex?: number | undefined): void;
    applyForce(body: JoltPhysicsBody, force: Vector3, location: Vector3, instanceIndex?: number | undefined): void;
    setAngularVelocity(body: JoltPhysicsBody, angVel: Vector3, instanceIndex?: number | undefined): void;
    getAngularVelocityToRef(body: JoltPhysicsBody, angVel: Vector3, instanceIndex?: number | undefined): void;
    getBodyGeometry(_body: JoltPhysicsBody): {};
    _disposeJoltBody(instance: IJoltBodyData): void;
    disposeBody(body: JoltPhysicsBody): void;
    setCollisionCallbackEnabled(_body: JoltPhysicsBody, _enabled: boolean, _instanceIndex?: number | undefined): void;
    setCollisionEndedCallbackEnabled(_body: JoltPhysicsBody, _enabled: boolean, _instanceIndex?: number | undefined): void;
    getCollisionObservable(_body: JoltPhysicsBody, _instanceIndex?: number | undefined): Observable<IPhysicsCollisionEvent>;
    getCollisionEndedObservable(_body: JoltPhysicsBody, _instanceIndex?: number | undefined): Observable<IBasePhysicsCollisionEvent>;
    setGravityFactor(_body: JoltPhysicsBody, _factor: number, _instanceIndex?: number | undefined): void;
    getGravityFactor(_body: JoltPhysicsBody, _instanceIndex?: number | undefined): number;
    setTargetTransform(_body: JoltPhysicsBody, _position: Vector3, _rotation: Quaternion, _instanceIndex?: number | undefined): void;
    initShape(shape: JoltPhysicsShape, type: PhysicsShapeType, options: PhysicsShapeParameters): void;
    setShapeFilterMembershipMask(_shape: JoltPhysicsShape, _membershipMask: number): void;
    getShapeFilterMembershipMask(_shape: JoltPhysicsShape): number;
    setShapeFilterCollideMask(_shape: JoltPhysicsShape, _collideMask: number): void;
    getShapeFilterCollideMask(_shape: JoltPhysicsShape): number;
    setMaterial(shape: JoltPhysicsShape, material: PhysicsMaterial): void;
    getMaterial(shape: JoltPhysicsShape): PhysicsMaterial;
    setDensity(shape: JoltPhysicsShape, density: number): void;
    getDensity(shape: JoltPhysicsShape): number;
    addChild(shape: JoltPhysicsShape, newChild: JoltPhysicsShape, translation?: Vector3 | undefined, rotation?: Quaternion | undefined, scale?: Vector3 | undefined): void;
    removeChild(shape: JoltPhysicsShape, childIndex: number): void;
    getNumChildren(shape: JoltPhysicsShape): number;
    getBoundingBox(_shape: JoltPhysicsShape): BoundingBox;
    disposeShape(shape: JoltPhysicsShape): void;
    setTrigger(shape: JoltPhysicsShape, isTrigger: boolean): void;
    addConstraint(body: JoltPhysicsBody, childBody: JoltPhysicsBody, constraint: JoltPhysicsConstraint, instanceIndex?: number | undefined, childInstanceIndex?: number | undefined): void;
    initConstraint(constraint: JoltPhysicsConstraint, body: JoltPhysicsBody, childBody: JoltPhysicsBody, instanceIndex?: number | undefined, childInstanceIndex?: number | undefined): void;
    setEnabled(constraint: JoltPhysicsConstraint, isEnabled: boolean): void;
    getEnabled(constraint: JoltPhysicsConstraint): boolean;
    setCollisionsEnabled(_constraint: JoltPhysicsConstraint, _isEnabled: boolean): void;
    getCollisionsEnabled(_constraint: JoltPhysicsConstraint): boolean;
    setAxisFriction(_constraint: JoltPhysicsConstraint, _axis: PhysicsConstraintAxis, _friction: number): void;
    getAxisFriction(_constraint: JoltPhysicsConstraint, _axis: PhysicsConstraintAxis): Nullable<number>;
    setAxisMode(_constraint: JoltPhysicsConstraint, _axis: PhysicsConstraintAxis, _limitMode: PhysicsConstraintAxisLimitMode): void;
    getAxisMode(_constraint: JoltPhysicsConstraint, _axis: PhysicsConstraintAxis): Nullable<PhysicsConstraintAxisLimitMode>;
    setAxisMinLimit(_constraint: JoltPhysicsConstraint, _axis: PhysicsConstraintAxis, _minLimit: number): void;
    getAxisMinLimit(_constraint: JoltPhysicsConstraint, _axis: PhysicsConstraintAxis): Nullable<number>;
    setAxisMaxLimit(_constraint: JoltPhysicsConstraint, _axis: PhysicsConstraintAxis, _limit: number): void;
    getAxisMaxLimit(_constraint: JoltPhysicsConstraint, _axis: PhysicsConstraintAxis): Nullable<number>;
    setAxisMotorType(_constraint: JoltPhysicsConstraint, _axis: PhysicsConstraintAxis, _motorType: PhysicsConstraintMotorType): void;
    getAxisMotorType(_constraint: JoltPhysicsConstraint, _axis: PhysicsConstraintAxis): Nullable<PhysicsConstraintMotorType>;
    setAxisMotorTarget(_constraint: JoltPhysicsConstraint, _axis: PhysicsConstraintAxis, _target: number): void;
    getAxisMotorTarget(_constraint: JoltPhysicsConstraint, _axis: PhysicsConstraintAxis): Nullable<number>;
    setAxisMotorMaxForce(_constraint: JoltPhysicsConstraint, _axis: PhysicsConstraintAxis, _maxForce: number): void;
    getAxisMotorMaxForce(_constraint: JoltPhysicsConstraint, _axis: PhysicsConstraintAxis): Nullable<number>;
    disposeConstraint(constraint: JoltPhysicsConstraint): void;
    getBodiesUsingConstraint(constraint: JoltPhysicsConstraint): ConstrainedBodyPair[];
    raycast(from: Vector3, to: Vector3, result: PhysicsRaycastResult, _query?: IRaycastQuery | undefined): void;
    dispose(): void;
    onContactRemove(_body: number, _withBody: number): void;
    onContactAdd(_body: number, _withBody: number, _contactSettings: JoltContactSetting): void;
    onContactPersist(_body: number, _withBody: number, _contactSettings: JoltContactSetting): void;
    onContactValidate(_body: number, _withBody: number): OnContactValidateResponse;
    createWheeledVehicleController(impostor: JoltPhysicsBody, settings: Vehicle.WheeledVehicleSettings, input: WheeledVehicleInput<Jolt.WheeledVehicleController>): Promise<WheeledVehicleController>;
    createMotorcycleVehicleController(impostor: JoltPhysicsBody, settings: Vehicle.WheeledVehicleSettings, input: WheeledVehicleInput<Jolt.MotorcycleController>): Promise<MotorcycleController>;
}
